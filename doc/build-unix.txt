Copyright (c) 2009-2012 Bitcoin Developers
Copyright (c) 2011-2012 Litecoin Developers
Copyright (c) 2013-2014 Dogecoin Developers
Copyright (c) 2014 Rabbitcoin Developers
Copyright (c) 2014 Educoin Developers

Distributed under the MIT/X11 software license, see the accompanying
file COPYING or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
================

To Build
--------

cd src/
mkdir obj/
make -f makefile.unix USE_UPNP=-           # Headless educoind
#make -f makefile.unix USE_UPNP=1 STATIC=1 # Release

See readme-qt.rst for instructions on building Educoin-Qt,
the graphical user interface.

Build Instructions Ubuntu (13.04 Raring)
----------------------------------------
    sudo apt-get install libboost-system1.53.0 libboost-filesystem1.53.0 libboost-program-options1.53.0 libboost-thread1.53.0 libdb5.1++ libminiupnpc8

or

    sudo apt-get install build-essential \
                         libssl-dev \
                         libdb5.1++-dev \
                         libboost-all-dev \
                         libqrencode-dev \
                         libminiupnpc-dev

    cd src/
    make -f makefile.unix USE_UPNP=1 USE_IPV6=1 USE_QRCODE=1

Unless you're debugging, strip debug symbols

    strip educoind

Options
-------

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  UPnP support is compiled in and
turned off by default.  Set USE_UPNP to a different value to control this:
 USE_UPNP=-    No UPnP support - miniupnp not required
 USE_UPNP=0    (the default) UPnP support turned off by default at runtime
 USE_UPNP=1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE_QRCODE to control this:
 USE_QRCODE=0   (the default) No QRCode support - libqrcode not required
 USE_QRCODE=1   QRCode support enabled

IPv6 support may be enabled by setting
 USE_IPV6=1    Enable IPv6 support

Dependencies
------------

 Library      Version  Purpose            Description
 -------      -------  -------            -----------
 libssl       1.0.1e   SSL Support        Secure communications
 libdb        5.1.29   Berkeley DB        Blockchain & wallet storage
 libboost     1.53.0   Boost              C++ Library
 miniupnpc    1.6.3    UPnP Support       Optional firewall-jumping support
 libqrencode  3.4.2    QRCode generation  Optional QRCode generation
 gcc          4:4.8.1

 See licenses.txt for license details

Security
--------
To help make your educoin installation more secure by making certain attacks
impossible to exploit even if a vulnerability is found, you can take the
following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout
    Randomization offered by some kernels. An attacker who is able to cause
    execution of code at an arbitrary memory location is thwarted if he doesn't
    know where anything useful is located. The stack and heap are randomly
    located by default but this allows the code section to be randomly located
    as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this
    will cause an error such as: "relocation R_X86_64_32 against `......' can
    not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1

    To test that you have built PIE executable, install scanelf, part of
    paxutils, and use:
    scanelf -e ./educoind

    The output should contain:
     TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow
    exploits are possible if vulnerable buffers are found. By default,
    educoind should be built with a non-executable stack but if one of the
    libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will
    silently build an executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./educoind

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not
    executable.
